# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from voxa.speech.v1 import asr_pb2 as voxa_dot_speech_dot_v1_dot_asr__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in voxa/speech/v1/asr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ASRStub(object):
    """ASR is the automatic speech recognition service definition.
    It provides streaming and batch speech recognition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamingRecognize = channel.stream_stream(
                '/voxa.speech.v1.ASR/StreamingRecognize',
                request_serializer=voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeRequest.SerializeToString,
                response_deserializer=voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeResponse.FromString,
                _registered_method=True)
        self.Recognize = channel.unary_unary(
                '/voxa.speech.v1.ASR/Recognize',
                request_serializer=voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeRequest.SerializeToString,
                response_deserializer=voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeResponse.FromString,
                _registered_method=True)


class ASRServicer(object):
    """ASR is the automatic speech recognition service definition.
    It provides streaming and batch speech recognition.
    """

    def StreamingRecognize(self, request_iterator, context):
        """StreamingRecognize performs bidirectional streaming recognition.
        The client streams audio frames; the server streams transcript updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recognize(self, request, context):
        """Recognize performs non-streaming recognition for REST/HTTP clients.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeRequest.FromString,
                    response_serializer=voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeResponse.SerializeToString,
            ),
            'Recognize': grpc.unary_unary_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeRequest.FromString,
                    response_serializer=voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'voxa.speech.v1.ASR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('voxa.speech.v1.ASR', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ASR(object):
    """ASR is the automatic speech recognition service definition.
    It provides streaming and batch speech recognition.
    """

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/voxa.speech.v1.ASR/StreamingRecognize',
            voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeRequest.SerializeToString,
            voxa_dot_speech_dot_v1_dot_asr__pb2.StreamingRecognizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Recognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/voxa.speech.v1.ASR/Recognize',
            voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeRequest.SerializeToString,
            voxa_dot_speech_dot_v1_dot_asr__pb2.RecognizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
