syntax = "proto3";

package voxa.speech.v1;

import "voxa/speech/v1/audio.proto";

option go_package = "github.com/jmarc101/voxa/api/gen/voxa/speech/v1;speechv1";
option java_package = "com.voxa.speech.v1";
option java_multiple_files = true;
option java_outer_classname = "AsrProto";


// Ultra-minimal PoC: biâ€‘di streaming ASR with only audio chunks and basic control.
// Assumptions: PCM16, mono, fixed sample rate known to both sides out of band.
service Asr {
  // StreamingRecognize is a streaming RPC that allows the client to send audio chunks and receive transcripts.
  rpc StreamingRecognize(stream StreamingRecognizeRequest) returns (stream StreamingRecognizeResponse);
}


// ========================= Requests =========================
message StreamingRecognizeRequest {
  // Utterance ID.
  string utterance_id = 1;
  oneof payload {
    // Control messages
    ASRControl control = 10;
    // Audio chunks
    AudioChunk audio = 11;
  }
}

// ASRControl is a control message for the ASR engine.
message ASRControl {
  // The type of control message.
  ControlType type = 1;
}


// ========================= Responses =========================
message StreamingRecognizeResponse {
  // The utterance ID.
  string utterance_id = 1;
  // The type of response.
  ResponseType type = 2;

  oneof result {
    // The partial transcript.
    Transcript partial_transcript = 10;
    // The final transcript.
    Transcript final_transcript = 11;
    // The control acknowledgment.
    ControlAck control_ack = 12;
    // The error.
    AsrError error = 13;
  }
}


// Transcript is a transcript of the audio.
message Transcript {
  // The recognized text.
  string text = 1;
}

// ControlAck is an acknowledgment of a control message.
message ControlAck {
  // The type of control message.
  ControlType type = 1;
  // The message.
  string message = 2;
}

// AsrError is an error response.
// Map to gRPC status codes where possible.
message AsrError {
  // The error code.
  int32 code = 1;
  // The error message.
  string message = 2;
  // The error details.
  string details = 3;
}

// ControlType is the type of control message.
enum ControlType {
  // The control type is unspecified.
  CONTROL_TYPE_UNSPECIFIED = 0;
  // FLUSH: Forces finalize the transcript buffer.
  FLUSH = 1;
  // RESET: Clear the current transcript and start a new one.
  RESET = 2;
  // END: Forces finalize and to close the stream.
  END = 3;
}

// ResponseType is the type of response.
enum ResponseType {
  // The response type is unspecified.
  RESPONSE_TYPE_UNSPECIFIED = 0;
  // The partial transcript.
  PARTIAL = 1;
  // The final transcript.
  FINAL = 2;
  // The control acknowledgment.
  CONTROL_ACK = 3;
  // The error.
  ERROR = 4;
}
